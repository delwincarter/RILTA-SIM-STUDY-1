readme_content <- paste(
"## Project Directory Structure\n",
"Below is the list of important files and directories in the project:\n\n",
directory_structure
)
# Write to README.md
writeLines(readme_content, str_c(root_dir, "/README.md"))
# Print confirmation
cat("README.md has been updated with the latest project structure.")
library(fs)  # for file system operations
library(dplyr)  # for data manipulation
library(stringr)  # for string operations
# Function to generate descriptions based on directory names
generate_description <- function(path) {
basename <- basename(path)
description <- switch(basename,
"2T_analysis" = "Contains all two-timepoint longitudinal analyses.",
"3T_analysis" = "Contains all three-timepoint longitudinal analyses, structured similarly to the 2T_analysis folder.",
"figures" = "Generated figures from the analysis.",
"tables" = "Statistical tables and results summaries.",
"images" = "Images used or produced by the Quarto documents.",
"child_documents" = "Contains reusable child documents for analysis tasks.",
paste("Directory for", basename))  # Default description if no match
return(description)
}
# Recursive function to print directory structure with descriptions
generate_directory_structure <- function(path, level = 0) {
contents <- fs::dir_ls(path, recurse = FALSE)
structure_string <- ""
for (item in contents) {
# Check if it's a directory and recurse or handle as a file
if (fs::dir_exists(item)) {
description <- generate_description(item)
structure_string <- paste0(structure_string, str_rep("  ", level), "- **", basename(item), "/** ", description, "\n")
structure_string <- paste0(structure_string, generate_directory_structure(item, level + 1))
} else {
structure_string <- paste0(structure_string, str_rep("  ", level), "- ", basename(item), "\n")
}
}
return(structure_string)
}
# Root directory of your project
root_dir <- here::here()
# Generate the directory structure
directory_structure <- generate_directory_structure(root_dir)
library(fs)  # for file system operations
library(dplyr)  # for data manipulation
library(stringr)  # for string operations
# Function to generate descriptions based on directory names
generate_description <- function(path) {
basename <- basename(path)
description <- switch(basename,
"2T_analysis" = "Contains all two-timepoint longitudinal analyses.",
"3T_analysis" = "Contains all three-timepoint longitudinal analyses, structured similarly to the 2T_analysis folder.",
"figures" = "Generated figures from the analysis.",
"tables" = "Statistical tables and results summaries.",
"images" = "Images used or produced by the Quarto documents.",
"child_documents" = "Contains reusable child documents for analysis tasks.",
paste("Directory for", basename))  # Default description if no match
return(description)
}
# Recursive function to print directory structure with descriptions
generate_directory_structure <- function(path, level = 0) {
contents <- fs::dir_ls(path, recurse = FALSE)
structure_string <- ""
for (item in contents) {
# Check if it's a directory and recurse or handle as a file
if (fs::dir_exists(item)) {
description <- generate_description(item)
structure_string <- paste0(structure_string, str_rep("  ", level), "- **", basename(item), "/** ", description, "\n")
structure_string <- paste0(structure_string, generate_directory_structure(item, level + 1))
} else {
structure_string <- paste0(structure_string, str_rep("  ", level), "- ", basename(item), "\n")
}
}
return(structure_string)
}
# Root directory of your project
root_dir <- here::here()
# Generate the directory structure
directory_structure <- generate_directory_structure(root_dir)
library(fs)  # for file system operations
library(dplyr)  # for data manipulation
library(stringr)  # for string operations
# Function to generate descriptions based on directory names
generate_description <- function(path) {
basename <- basename(path)
description <- switch(basename,
"2T_analysis" = "Contains all two-timepoint longitudinal analyses.",
"3T_analysis" = "Contains all three-timepoint longitudinal analyses, structured similarly to the 2T_analysis folder.",
"figures" = "Generated figures from the analysis.",
"tables" = "Statistical tables and results summaries.",
"images" = "Images used or produced by the Quarto documents.",
"child_documents" = "Contains reusable child documents for analysis tasks.",
paste("Directory for", basename))  # Default description if no match
return(description)
}
# Recursive function to print directory structure with descriptions
generate_directory_structure <- function(path, level = 0) {
contents <- fs::dir_ls(path, recurse = FALSE)
structure_string <- ""
for (item in contents) {
# Check if it's a directory and recurse or handle as a file
if (fs::dir_exists(item)) {
description <- generate_description(item)
structure_string <- paste0(structure_string, str_repeat("  ", level), "- **", basename(item), "/** ", description, "\n")
structure_string <- paste0(structure_string, generate_directory_structure(item, level + 1))
} else {
structure_string <- paste0(structure_string, str_repeat("  ", level), "- ", basename(item), "\n")
}
}
return(structure_string)
}
# Root directory of your project
root_dir <- here::here()
# Generate the directory structure
directory_structure <- generate_directory_structure(root_dir)
library(fs)  # for file system operations
library(dplyr)  # for data manipulation
library(stringr)  # for string operations
# Function to generate descriptions based on directory names
generate_description <- function(path) {
basename <- basename(path)
description <- switch(basename,
"2T_analysis" = "Contains all two-timepoint longitudinal analyses.",
"3T_analysis" = "Contains all three-timepoint longitudinal analyses, structured similarly to the 2T_analysis folder.",
"figures" = "Generated figures from the analysis.",
"tables" = "Statistical tables and results summaries.",
"images" = "Images used or produced by the Quarto documents.",
"child_documents" = "Contains reusable child documents for analysis tasks.",
paste("Directory for", basename))  # Default description if no match
return(description)
}
# Recursive function to print directory structure with descriptions
generate_directory_structure <- function(path, level = 0) {
contents <- fs::dir_ls(path, recurse = FALSE)
structure_string <- ""
for (item in contents) {
# Check if it's a directory and recurse or handle as a file
if (fs::dir_exists(item)) {
description <- generate_description(item)
structure_string <- paste0(structure_string, str_rep("  ", level), "- **", basename(item), "/** ", description, "\n")
structure_string <- paste0(structure_string, generate_directory_structure(item, level + 1))
} else {
structure_string <- paste0(structure_string, str_rep("  ", level), "- ", basename(item), "\n")
}
}
return(structure_string)
}
# Root directory of your project
root_dir <- here::here()
# Generate the directory structure
directory_structure <- generate_directory_structure(root_dir)
library(fs)  # for file system operations
library(dplyr)  # for data manipulation
library(stringr)  # for string operations
# Function to generate descriptions based on directory names
generate_description <- function(path) {
basename <- basename(path)
description <- switch(basename,
"2T_analysis" = "Contains all two-timepoint longitudinal analyses.",
"3T_analysis" = "Contains all three-timepoint longitudinal analyses, structured similarly to the 2T_analysis folder.",
"figures" = "Generated figures from the analysis.",
"tables" = "Statistical tables and results summaries.",
"images" = "Images used or produced by the Quarto documents.",
"child_documents" = "Contains reusable child documents for analysis tasks.",
paste("Directory for", basename))  # Default description if no match
return(description)
}
# Recursive function to print directory structure with descriptions
generate_directory_structure <- function(path, level = 0) {
contents <- fs::dir_ls(path, recurse = FALSE)
structure_string <- ""
for (item in contents) {
# Check if it's a directory and recurse or handle as a file
if (fs::dir_exists(item)) {
description <- generate_description(item)
structure_string <- paste0(structure_string, str_repeat("  ", level), "- **", basename(item), "/** ", description, "\n")
structure_string <- paste0(structure_string, generate_directory_structure(item, level + 1))
} else {
structure_string <- paste0(structure_string, str_repeat("  ", level), "- ", basename(item), "\n")
}
}
return(structure_string)
}
# Root directory of your project
root_dir <- here::here()
# Generate the directory structure
directory_structure <- generate_directory_structure(root_dir)
library(fs)  # for file system operations
library(dplyr)  # for data manipulation
# Function to generate descriptions based on directory names
generate_description <- function(path) {
basename <- basename(path)
description <- switch(basename,
"2T_analysis" = "Contains all two-timepoint longitudinal analyses.",
"3T_analysis" = "Contains all three-timepoint longitudinal analyses, structured similarly to the 2T_analysis folder.",
"figures" = "Generated figures from the analysis.",
"tables" = "Statistical tables and results summaries.",
"images" = "Images used or produced by the Quarto documents.",
"child_documents" = "Contains reusable child documents for analysis tasks.",
paste("Directory for", basename))  # Default description if no match
return(description)
}
# Recursive function to print directory structure with descriptions
generate_directory_structure <- function(path, level = 0) {
contents <- fs::dir_ls(path, recurse = FALSE)
structure_string <- ""
for (item in contents) {
# Check if it's a directory and recurse or handle as a file
if (fs::dir_exists(item)) {
description <- generate_description(item)
structure_string <- paste0(structure_string, strrep("  ", level), "- **", basename(item), "/** ", description, "\n")
structure_string <- paste0(structure_string, generate_directory_structure(item, level + 1))
} else {
structure_string <- paste0(structure_string, strrep("  ", level), "- ", basename(item), "\n")
}
}
return(structure_string)
}
# Root directory of your project
root_dir <- here::here()
# Generate the directory structure
directory_structure <- generate_directory_structure(root_dir)
# Format the README content
readme_content <- paste(
"# Project Directory Structure\n\n",
"This README provides an overview of the directory structure and important components of the project. Each directory is listed with a brief description to help new users understand the purpose of the files and folders within.\n\n",
directory_structure,
"\n## Additional Notes\n",
"This project uses `here::here()` to set paths relative to the project root, ensuring reproducibility across different environments."
)
# Write to README.md
writeLines(readme_content, fs::path(root_dir, "README.md"))
# Print confirmation
cat("README.md has been updated with the latest project structure and descriptions.")
generate_readme <- function(root_dir = ".") {
# Step 1: List main folder contents
main_contents <- list.files(root_dir, full.names = FALSE)
# Step 2: List subfolders in "2 Time Points" and "3 Time Points"
two_time_points <- list.files(file.path(root_dir, "2 Time Points"), full.names = FALSE)
three_time_points <- list.files(file.path(root_dir, "3 Time Points"), full.names = FALSE)
# Step 3: Prepare README content
readme_lines <- c(
"# Project Directory Overview",
"",
"## Main Folder Contents",
paste("- ", main_contents),
"",
"## 2 Time Points Folder Contents",
paste("- ", two_time_points),
"",
"## 3 Time Points Folder Contents",
paste("- ", three_time_points),
"",
"## Descriptions of Subfolders",
"### 2 Time Points Subfolders"
)
# Step 4: Add descriptions for subfolders in "2 Time Points"
for (folder in two_time_points) {
description <- if (grepl("^\\d_", folder)) {
"Contains input, output, and CSV files for simulation runs."
} else if (grepl("^zFigures", folder)) {
"Contains generated figures for analyses."
} else if (grepl("^zHeatmaps", folder)) {
"Contains heatmaps visualizing simulation results."
} else if (grepl("^zViolator", folder)) {
"Contains plots highlighting label switching or other violations."
} else {
"General folder for analysis."
}
readme_lines <- c(readme_lines, paste("- **", folder, "**:", description))
}
# Step 5: Add descriptions for subfolders in "3 Time Points"
readme_lines <- c(readme_lines, "### 3 Time Points Subfolders")
for (folder in three_time_points) {
description <- if (grepl("^\\d_", folder)) {
"Contains input, output, and CSV files for simulation runs."
} else if (grepl("^zFigures", folder)) {
"Contains generated figures for analyses."
} else if (grepl("^zHeatmaps", folder)) {
"Contains heatmaps visualizing simulation results."
} else if (grepl("^zViolator", folder)) {
"Contains plots highlighting label switching or other violations."
} else {
"General folder for analysis."
}
readme_lines <- c(readme_lines, paste("- **", folder, "**:", description))
}
# Step 6: Write README.md
writeLines(readme_lines, file.path(root_dir, "README.md"))
message("README.md created successfully!")
}
# Run the script
generate_readme()
library(officer)
install.packages("officer")
library(officer)
generate_readme_and_doc <- function(root_dir = ".", readme_file = "README.md", doc_file = "Project_Documentation.docx") {
# Step 1: List main folder contents
main_contents <- list.files(root_dir, full.names = FALSE)
# Step 2: List subfolders in "2 Time Points" and "3 Time Points"
two_time_points <- list.files(file.path(root_dir, "2 Time Points"), full.names = FALSE)
three_time_points <- list.files(file.path(root_dir, "3 Time Points"), full.names = FALSE)
# Step 3: Prepare README.md content
readme_lines <- c(
"# Project Directory Overview",
"",
"## Main Folder Contents",
paste("- ", main_contents),
"",
"## 2 Time Points Folder Contents",
paste("- ", two_time_points),
"",
"## 3 Time Points Folder Contents",
paste("- ", three_time_points),
"",
"## Descriptions of Subfolders",
"### 2 Time Points Subfolders"
)
# Add descriptions for subfolders in "2 Time Points"
for (folder in two_time_points) {
description <- if (grepl("^\\d_", folder)) {
"Contains input, output, and CSV files for simulation runs."
} else if (grepl("^zFigures", folder)) {
"Contains generated figures for analyses."
} else if (grepl("^zHeatmaps", folder)) {
"Contains heatmaps visualizing simulation results."
} else if (grepl("^zViolator", folder)) {
"Contains plots highlighting label switching or other violations."
} else {
"General folder for analysis."
}
readme_lines <- c(readme_lines, paste("- **", folder, "**:", description))
}
# Add descriptions for subfolders in "3 Time Points"
readme_lines <- c(readme_lines, "### 3 Time Points Subfolders")
for (folder in three_time_points) {
description <- if (grepl("^\\d_", folder)) {
"Contains input, output, and CSV files for simulation runs."
} else if (grepl("^zFigures", folder)) {
"Contains generated figures for analyses."
} else if (grepl("^zHeatmaps", folder)) {
"Contains heatmaps visualizing simulation results."
} else if (grepl("^zViolator", folder)) {
"Contains plots highlighting label switching or other violations."
} else {
"General folder for analysis."
}
readme_lines <- c(readme_lines, paste("- **", folder, "**:", description))
}
# Write README.md
writeLines(readme_lines, file.path(root_dir, readme_file))
message("README.md created successfully!")
# Step 4: Prepare Word document content
doc <- read_docx()
doc <- body_add_par(doc, "Project Directory Overview", style = "heading 1")
# Main folder contents
doc <- body_add_par(doc, "Main Folder Contents", style = "heading 2")
doc <- body_add_par(doc, paste("- ", main_contents, collapse = "\n"), style = "Normal")
# 2 Time Points folder
doc <- body_add_par(doc, "2 Time Points Folder Contents", style = "heading 2")
doc <- body_add_par(doc, paste("- ", two_time_points, collapse = "\n"), style = "Normal")
# 3 Time Points folder
doc <- body_add_par(doc, "3 Time Points Folder Contents", style = "heading 2")
doc <- body_add_par(doc, paste("- ", three_time_points, collapse = "\n"), style = "Normal")
# Descriptions for "2 Time Points" subfolders
doc <- body_add_par(doc, "Descriptions of Subfolders: 2 Time Points", style = "heading 2")
for (folder in two_time_points) {
description <- if (grepl("^\\d_", folder)) {
"Contains input, output, and CSV files for simulation runs."
} else if (grepl("^zFigures", folder)) {
"Contains generated figures for analyses."
} else if (grepl("^zHeatmaps", folder)) {
"Contains heatmaps visualizing simulation results."
} else if (grepl("^zViolator", folder)) {
"Contains plots highlighting label switching or other violations."
} else {
"General folder for analysis."
}
doc <- body_add_par(doc, paste("- ", folder, ":", description), style = "Normal")
}
# Descriptions for "3 Time Points" subfolders
doc <- body_add_par(doc, "Descriptions of Subfolders: 3 Time Points", style = "heading 2")
for (folder in three_time_points) {
description <- if (grepl("^\\d_", folder)) {
"Contains input, output, and CSV files for simulation runs."
} else if (grepl("^zFigures", folder)) {
"Contains generated figures for analyses."
} else if (grepl("^zHeatmaps", folder)) {
"Contains heatmaps visualizing simulation results."
} else if (grepl("^zViolator", folder)) {
"Contains plots highlighting label switching or other violations."
} else {
"General folder for analysis."
}
doc <- body_add_par(doc, paste("- ", folder, ":", description), style = "Normal")
}
# Save the Word document
print(doc, target = file.path(root_dir, doc_file))
message("Documentation created successfully at: ", file.path(root_dir, doc_file))
}
# Run the script
generate_readme_and_doc()
library(officer)
generate_readme_and_doc <- function(root_dir = ".", readme_file = "README.md", doc_file = "_RILTA 1 (k = 2) _ STARTS Project_Documentation.docx") {
# Step 1: List main folder contents
main_contents <- list.files(root_dir, full.names = FALSE)
# Step 2: List subfolders in "2 Time Points" and "3 Time Points"
two_time_points <- list.files(file.path(root_dir, "2 Time Points"), full.names = FALSE)
three_time_points <- list.files(file.path(root_dir, "3 Time Points"), full.names = FALSE)
# Step 3: Prepare README.md content
readme_lines <- c(
"# Project Directory Overview",
"",
"## Main Folder Contents",
paste("- ", main_contents),
"",
"## 2 Time Points Folder Contents",
paste("- ", two_time_points),
"",
"## 3 Time Points Folder Contents",
paste("- ", three_time_points),
"",
"## Descriptions of Subfolders",
"### 2 Time Points Subfolders"
)
# Add descriptions for subfolders in "2 Time Points"
for (folder in two_time_points) {
description <- if (grepl("^\\d_", folder)) {
"Contains input, output, and CSV files for simulation runs."
} else if (grepl("^zFigures", folder)) {
"Contains generated figures for analyses."
} else if (grepl("^zHeatmaps", folder)) {
"Contains heatmaps visualizing simulation results."
} else if (grepl("^zViolator", folder)) {
"Contains plots highlighting label switching or other violations."
} else {
"General folder for analysis."
}
readme_lines <- c(readme_lines, paste("- **", folder, "**:", description))
}
# Add descriptions for subfolders in "3 Time Points"
readme_lines <- c(readme_lines, "### 3 Time Points Subfolders")
for (folder in three_time_points) {
description <- if (grepl("^\\d_", folder)) {
"Contains input, output, and CSV files for simulation runs."
} else if (grepl("^zFigures", folder)) {
"Contains generated figures for analyses."
} else if (grepl("^zHeatmaps", folder)) {
"Contains heatmaps visualizing simulation results."
} else if (grepl("^zViolator", folder)) {
"Contains plots highlighting label switching or other violations."
} else {
"General folder for analysis."
}
readme_lines <- c(readme_lines, paste("- **", folder, "**:", description))
}
# Write README.md
writeLines(readme_lines, file.path(root_dir, readme_file))
message("README.md created successfully!")
# Step 4: Prepare Word document content
doc <- read_docx()
doc <- body_add_par(doc, "Project Directory Overview", style = "heading 1")
# Main folder contents
doc <- body_add_par(doc, "Main Folder Contents", style = "heading 2")
doc <- body_add_par(doc, paste("- ", main_contents, collapse = "\n"), style = "Normal")
# 2 Time Points folder
doc <- body_add_par(doc, "2 Time Points Folder Contents", style = "heading 2")
doc <- body_add_par(doc, paste("- ", two_time_points, collapse = "\n"), style = "Normal")
# 3 Time Points folder
doc <- body_add_par(doc, "3 Time Points Folder Contents", style = "heading 2")
doc <- body_add_par(doc, paste("- ", three_time_points, collapse = "\n"), style = "Normal")
# Descriptions for "2 Time Points" subfolders
doc <- body_add_par(doc, "Descriptions of Subfolders: 2 Time Points", style = "heading 2")
for (folder in two_time_points) {
description <- if (grepl("^\\d_", folder)) {
"Contains input, output, and CSV files for simulation runs."
} else if (grepl("^zFigures", folder)) {
"Contains generated figures for analyses."
} else if (grepl("^zHeatmaps", folder)) {
"Contains heatmaps visualizing simulation results."
} else if (grepl("^zViolator", folder)) {
"Contains plots highlighting label switching or other violations."
} else {
"General folder for analysis."
}
doc <- body_add_par(doc, paste("- ", folder, ":", description), style = "Normal")
}
# Descriptions for "3 Time Points" subfolders
doc <- body_add_par(doc, "Descriptions of Subfolders: 3 Time Points", style = "heading 2")
for (folder in three_time_points) {
description <- if (grepl("^\\d_", folder)) {
"Contains input, output, and CSV files for simulation runs."
} else if (grepl("^zFigures", folder)) {
"Contains generated figures for analyses."
} else if (grepl("^zHeatmaps", folder)) {
"Contains heatmaps visualizing simulation results."
} else if (grepl("^zViolator", folder)) {
"Contains plots highlighting label switching or other violations."
} else {
"General folder for analysis."
}
doc <- body_add_par(doc, paste("- ", folder, ":", description), style = "Normal")
}
# Save the Word document
print(doc, target = file.path(root_dir, doc_file))
message("Documentation created successfully at: ", file.path(root_dir, doc_file))
}
# Run the script
generate_readme_and_doc()
here::here()
