---
title: "Study 1 (k = 2) LTA Generated, LTA Analyzed: Two Timepoints"
format: html
editor: visual
author: "Delwin Carter"
page-layout: full
fig-format: svg
knitr:
  opts_chunk:
    out.width: "90%"
    fig.align: center
---

```{r, message=FALSE, warning=FALSE}
library(tidyverse)
library(glue)
library(MplusAutomation)
library(here)
library(gt)
library(janitor)
library(ggtext)
library(rlang)
library(knitr)
library(kableExtra)

```

# Study 1 (k = 2) LTA Generated, LTA Analyzed

![](images/LTA_LTA-01.png){width="324"}

# Model 1:

# Conditions:

Sample Size: N = 500, 1000, 2000, 4000

Transition logit (Probability): TPs = 1.385 (.8), .85 (.7), .41 (.6), -.41 (.4), -.85 (.3), -1.385 (.2)

![](images/clipboard-3344253592.png){width="450"}

```{r}

p1 <- expand.grid(N = c(500, 1000, 2000, 4000),
TPs = c(1.385, .85, .41, -.41, -.85, -1.385),
TH = c(1))

```

```{r,message=FALSE, warning=FALSE, eval = FALSE}
lta_lta_func <- function(N, TPs, TH) {
  
  LTA_LTA <- mplusObject(
    TITLE = glue("Generate LTA_LTA_N = {N}_TP = {TPs}_{TH}"),

    MONTECARLO =
      glue("NAMES = u11-u15 u21-u25;
      GENERATE = u11-u15 u21-u25(1);
      CATEGORICAL = u11-u15 u21-u25;
      GENCLASSES = c1(2) c2(2);
      CLASSES = c1(2) c2(2);
      NOBSERVATIONS = {N};
      SEED = 07252005;
      NREPS = 500;"),

    ANALYSIS =
      "TYPE = MIXTURE;
      algorithm = integration;
      processors = 8;
      logcriterion=0.00001;
      mconv=0.00001;",

    MODELPOPULATION = glue("	
        %OVERALL%

       [c1#1-c2#1*0];
      	c2#1 on c1#1*{TPs};

      MODEL POPULATION-c1:
        %c1#1%
     [u11$1*{TH} u12$1*{TH} u13$1*{TH} u14$1*{TH} u15$1*{TH}] (p111-p115);

        %c1#2%
     [u11$1*-{TH} u12$1*-{TH} u13$1*-{TH} u14$1*-{TH} u15$1*-{TH}] (p121-p125);

      MODEL POPULATION-c2:  
        %c2#1%
     [u21$1*{TH} u22$1*{TH} u23$1*{TH} u24$1*{TH} u25$1*{TH}] (p111-p115);

        %c2#2%
     [u21$1*-{TH} u22$1*-{TH} u23$1*-{TH} u24$1*-{TH} u25$1*-{TH}] (p121-p125);
       "),
     

    MODEL =
      glue("	
        %OVERALL%
          [c1#1-c2#1*0](par1-par2);
        	c2#1 on c1#1*{TPs} (par11);
        	
     MODEL c1:
        %c1#1%
     [u11$1*{TH} u12$1*{TH} u13$1*{TH} u14$1*{TH} u15$1*{TH}] (p111-p115);

        %c1#2%
     [u11$1*-{TH} u12$1*-{TH} u13$1*-{TH} u14$1*-{TH} u15$1*-{TH}] (p121-p125);

    MODEL c2: 	
        %c2#1%
     [u21$1*{TH} u22$1*{TH} u23$1*{TH} u24$1*{TH} u25$1*{TH}] (p111-p115);

        %c2#2%
     [u21$1*-{TH} u22$1*-{TH} u23$1*-{TH} u24$1*-{TH} u25$1*-{TH}] (p121-p125);
	      "),
      

    MODELCONSTRAINT =
      if (TPs == 1.385) {
        glue("
        New(
        trans11*.80 trans12*.20 trans21*.5 trans22*.5
        prob11*.5 prob12*.5 prob21*.65 prob22*.35);
        trans11 = 1/(1+exp(-(par2+par11)));
        trans12 = 1-trans11;
        trans21 = 1/(1+exp(-par2));
        trans22 = 1- trans21;
        !marginal probabilities at T1 and T2:
        prob11 = 1/(1+exp(-par1));
        prob12 = 1 - prob11;
        prob21 = prob11*trans11+prob12*trans21;
        prob22 = 1- prob21;
        ")
      } 
             else if (TPs == .85) {
        glue("
        New(
        trans11*.70 trans12*.30 trans21*.5 trans22*.5
        prob11*.5 prob12*.5 prob21*.60 prob22*.4);
        trans11 = 1/(1+exp(-(par2+par11)));
        trans12 = 1-trans11;
        trans21 = 1/(1+exp(-par2));
        trans22 = 1- trans21;
        !marginal probabilities at T1 and T2:
        prob11 = 1/(1+exp(-par1));
        prob12 = 1 - prob11;
        prob21 = prob11*trans11+prob12*trans21;
        prob22 = 1- prob21;
        ")
              } 
            else  if (TPs == .41) {
        glue("
        New(
        trans11*.60 trans12*.40 trans21*.5 trans22*.5
        prob11*.5 prob12*.5 prob21*.55 prob22*.45);
        trans11 = 1/(1+exp(-(par2+par11)));
        trans12 = 1-trans11;
        trans21 = 1/(1+exp(-par2));
        trans22 = 1- trans21;
        !marginal probabilities at T1 and T2:
        prob11 = 1/(1+exp(-par1));
        prob12 = 1 - prob11;
        prob21 = prob11*trans11+prob12*trans21;
        prob22 = 1- prob21;
        ")
              } 
             else if (TPs == -.41) {
        glue("
        New(
        trans11*.40 trans12*.60 trans21*.5 trans22*.5
        prob11*.5 prob12*.5 prob21*.45 prob22*.55);
        trans11 = 1/(1+exp(-(par2+par11)));
        trans12 = 1-trans11;
        trans21 = 1/(1+exp(-par2));
        trans22 = 1- trans21;
        !marginal probabilities at T1 and T2:
        prob11 = 1/(1+exp(-par1));
        prob12 = 1 - prob11;
        prob21 = prob11*trans11+prob12*trans21;
        prob22 = 1- prob21;
        ")
              } 
             else if (TPs == -.85) {
        glue("
        New(
        trans11*.30 trans12*.70 trans21*.5 trans22*.5
        prob11*.5 prob12*.5 prob21*.40 prob22*.60);
        trans11 = 1/(1+exp(-(par2+par11)));
        trans12 = 1-trans11;
        trans21 = 1/(1+exp(-par2));
        trans22 = 1- trans21;
        !marginal probabilities at T1 and T2:
        prob11 = 1/(1+exp(-par1));
        prob12 = 1 - prob11;
        prob21 = prob11*trans11+prob12*trans21;
        prob22 = 1- prob21;
        ")
              } 
        
        else if (TPs == -1.385) {
        glue("
         New(
        trans11*.20 trans12*.80 trans21*.5 trans22*.5
        prob11*.5 prob12*.5 prob21*.35 prob22*.65);

        trans11 = 1/(1+exp(-(par2+par11)));
        trans12 = 1-trans11;
        trans21 = 1/(1+exp(-par2));
        trans22 = 1- trans21;
        !marginal probabilities at T1 and T2:
        prob11 = 1/(1+exp(-par1));
        prob12 = 1 - prob11;
        prob21 = prob11*trans11+prob12*trans21;
        prob22 = 1- prob21;")
      }
  )

  # Run Mplus model
  LTA_LTA_Model<- mplusModeler(LTA_LTA, 
                                   dataout = here("1. 2T LTA GEN LTA ANALYZED", glue("LTA_LTA_N = {N}_TP = {TPs}_TH = {TH}_WD.dat")),
                                   modelout = glue(here("1. 2T LTA GEN LTA ANALYZED", "LTA_LTA_N = {N}_TP = {TPs}_TH = {TH}_WD.inp")),
                                   check = TRUE, run = TRUE, hashfilename = FALSE)
return(LTA_LTA_Model)
}

result_list <- lapply(1:nrow(p1), function(i) {
  lta_lta_func(p1$N[i], p1$TPs[i], p1$TH[i])
               })



```

# 

```{r}
# Extract models
lta_sim <- readModels(here("1. 2T LTA GEN LTA ANALYZED"), what = "parameters")

# Create table of unstandardized values across outputs
ltaNames <- names(lta_sim)
unstandardizedLTA <- sapply(sapply(lta_sim, "[", "parameters"), "[", "unstandardized")
names(unstandardizedLTA) <- ltaNames

```

```{r}
# Wrangle
apply_table_setup <- function(data) {
  table_setup <- data %>%
    slice(24) %>%  # Select only row 24
    rename(Power = pct_sig_coef,
           Parameter = param,
           Coverage = cover_95)  %>% 
               select(Parameter:Power)
  
  return(table_setup)
}

resultsLTA <- lapply(unstandardizedLTA, apply_table_setup)

lta_combined <- do.call("rbind", resultsLTA)
lta_combined <- as.data.frame(lta_combined)
rownames(lta_combined) <- toupper(rownames(lta_combined))
```

```{r}

# 1 = Mover, 2 = Stayer
lta_combined <- lta_combined %>%
  arrange(population) #Transition Probability

lta_combined$Transitions <- rep(c("1", "2"), each = 12)
lta_combined$N <- rep(c("2", "3", "4", "1"))

lta_combined <- lta_combined %>%
  arrange(N) %>%
  mutate(Cond_Num = as.array(rep(1:24)))

```

```{r}
# Calculate dichotomous variable for Power
lta_combined <- lta_combined %>%
  mutate(Power_Dic = ifelse(Power >= 0.8, 1, 0))

# Calculate dichotomous variable for Coverage
lta_combined <- lta_combined %>%
  mutate(Coverage_Dic = ifelse(Coverage > 0.98 | Coverage < 0.91, 0, 1))
```

```{r}
# Calculate Parameter Bias and SE Bias without %
lta_combined <- lta_combined %>%
  mutate(Parameter_Bias = ((as.numeric(as.character(average)) - as.numeric(as.character(population))) / as.numeric(as.character(population))) * 100,
         SE_Bias = ((as.numeric(as.character(average_se)) - as.numeric(as.character(population_sd))) / as.numeric(as.character(population_sd))) * 100) %>%
  mutate(across(c(Parameter_Bias, SE_Bias), ~ round(., 2)))

lta_combined$Parameter_Bias <- as.numeric(lta_combined$Parameter_Bias)
lta_combined$SE_Bias <- as.numeric(lta_combined$SE_Bias)
```

```{r}

all_data <-lta_combined


all_data$Population_Label <- factor(all_data$population, levels = c(.2, .3, .4, .6, .7, .8), labels = c(
  expression(bold(C[11]) ~ "\u2192" ~ bold(C[21]) ~ " = .200"),
  expression(bold(C[11]) ~ "\u2192" ~ bold(C[21]) ~ " = .300"),
  expression(bold(C[11]) ~ "\u2192" ~ bold(C[21]) ~ " = .400"),
  expression(bold(C[11]) ~ "\u2192" ~ bold(C[21]) ~ " = .600"),
  expression(bold(C[11]) ~ "\u2192" ~ bold(C[21]) ~ " = .700"),
  expression(bold(C[11]) ~ "\u2192" ~ bold(C[21]) ~ " = .800")
  ))
                            
# Subset for Transitions movers
subset_mover <- subset(all_data, Transitions == 1)

# Subset for Transitions stayers
subset_stayer <- subset(all_data, Transitions == 2)


```

```{r}
common_theme <- theme_minimal() +
  theme(
    panel.grid.major.x = element_blank(),
    panel.grid.minor.x = element_blank(),
    panel.grid.minor.y = element_blank(),
    axis.text.x = element_text(size = 8),  # Increase the size of x-axis text
    axis.ticks = element_line(color = "black", linewidth = 0.2),
    legend.position = "bottom",
    legend.title = element_blank(),
    text = element_text(family = "Times New Roman"),
    axis.title.x = element_text(margin = margin(t = 10, b = 10)),
    legend.margin = margin(t = -10),
    plot.caption = element_text(hjust = 0, margin = margin(t = 10))
  )

common_labels <- labs(
  x = "Sample Size",  
  y = "Bias (%)",
  color = "",
  title = "LTA Generated and LTA Analyzed with Mover Transition Probabilities"
)

# Plotting
plot_mover <- ggplot(data = subset_mover, aes(x = factor(N))) +  
  geom_line(aes(y = Parameter_Bias, color = "Parameter Bias", group = Population_Label), linewidth = 0.5, linetype = "solid") +  
  geom_line(aes(y = SE_Bias, color = "Standard Error Bias", group = Population_Label), linewidth = 0.5, linetype = "solid") +  
  geom_point(aes(y = Parameter_Bias, color = "Parameter Bias"), shape = 16, size = 1.5, fill = "#4169E1", alpha = 0.8) +  
  geom_point(aes(y = SE_Bias, color = "Standard Error Bias"), shape = 18, size = 1.5, fill = "#E14169", alpha = 0.8) +  
  geom_point(data = subset(subset_mover, Coverage_Dic == 0), aes(y = Parameter_Bias, color = "Coverage Failure"), shape = NA, size = 1.5, fill = "#4169E1", alpha = 0.8) +  
  geom_point(data = subset(subset_mover, Power_Dic == 0), aes(y = Parameter_Bias, color = "Power Failure"), shape = NA, size = 1.5, fill = "black", alpha = 0.8) + 
  geom_line(data = subset(subset_mover, Coverage_Dic == 0), aes(y = Parameter_Bias, color = "Coverage Failure", group = Population_Label), linewidth = 0.3, linetype = "solid") +
  geom_line(data = subset(subset_mover, Power_Dic == 0), aes(y = Parameter_Bias, color = "Power Failure", group = Population_Label), linewidth = 0.3, linetype = "solid") +
  scale_color_manual(
    values = c("Parameter Bias" = "#4169E1", "Standard Error Bias" = "#E14169", "Coverage Failure" = "#4169E1", "Power Failure" = "black"), 
    labels = c("Parameter Bias", "Standard Error Bias", "Coverage Failure", "Power Failure"), 
    breaks = c("Parameter Bias", "Standard Error Bias", "Coverage Failure", "Power Failure")
  ) +  
  common_labels +
  coord_cartesian(ylim = c(-40, 40)) +  
  facet_wrap(~ as.character(Population_Label), scales = "free", labeller = label_parsed) +  # Facet by Population_Label
  scale_x_discrete(labels = c(expression(italic("N") ~ " = 500"), expression(italic("N") ~ " = 1000"), expression(italic("N") ~ " = 2000"), expression(italic("N") ~ " = 4000"))) +  # Set X-axis labels
  scale_y_continuous(breaks = seq(-40, 40, by = 10)) +  
  common_theme +
  geom_hline(yintercept = c(-10, 10), linetype = "dashed", color = "#4169E1", linewidth = 0.3) +  
  geom_hline(yintercept = c(-5, 5), linetype = "dashed", color = "#E14169", linewidth = 0.3) +
  theme(
    legend.position = "bottom", 
    strip.placement = "outside", 
    strip.background = element_blank(),
    panel.spacing = unit(0.5, "lines")
  )

# Print the plot
print(plot_mover)


```

```{r}

common_labels <- labs(
  x = "Sample Size",  
  y = "Bias (%)",
  color = "",
  title = "LTA Generated and LTA Analyzed with Stayer Transition Probabilities"
)

# Plotting
plot_stayer <- ggplot(data = subset_stayer, aes(x = factor(N))) +  
  geom_line(aes(y = Parameter_Bias, color = "Parameter Bias", group = Population_Label), linewidth = 0.5, linetype = "solid") +  
  geom_line(aes(y = SE_Bias, color = "Standard Error Bias", group = Population_Label), linewidth = 0.5, linetype = "solid") +  
  geom_point(aes(y = Parameter_Bias, color = "Parameter Bias"), shape = 16, size = 1.5, fill = "#4169E1", alpha = 0.8) +  
  geom_point(aes(y = SE_Bias, color = "Standard Error Bias"), shape = 18, size = 1.5, fill = "#E14169", alpha = 0.8) +  
  geom_point(data = subset(subset_stayer, Coverage_Dic == 0), aes(y = Parameter_Bias, color = "Coverage Failure"), shape = NA, size = 1.5, fill = "#4169E1", alpha = 0.8) +  
  geom_point(data = subset(subset_stayer, Power_Dic == 0), aes(y = Parameter_Bias, color = "Power Failure"), shape = NA, size = 1.5, fill = "black", alpha = 0.8) + 
  geom_line(data = subset(subset_stayer, Coverage_Dic == 0), aes(y = Parameter_Bias, color = "Coverage Failure", group = Population_Label), linewidth = 0.3, linetype = "solid") +
  geom_line(data = subset(subset_stayer, Power_Dic == 0), aes(y = Parameter_Bias, color = "Power Failure", group = Population_Label), linewidth = 0.3, linetype = "solid") +
  scale_color_manual(
    values = c("Parameter Bias" = "#4169E1", "Standard Error Bias" = "#E14169", "Coverage Failure" = "#4169E1", "Power Failure" = "black"), 
    labels = c("Parameter Bias", "Standard Error Bias", "Coverage Failure", "Power Failure"), 
    breaks = c("Parameter Bias", "Standard Error Bias", "Coverage Failure", "Power Failure")
  ) +  
  common_labels +
  coord_cartesian(ylim = c(-40, 40)) +  
  facet_wrap(~ as.character(Population_Label), scales = "free", labeller = label_parsed) +  # Facet by Population_Label
  scale_x_discrete(labels = c(expression(italic("N") ~ " = 500"), expression(italic("N") ~ " = 1000"), expression(italic("N") ~ " = 2000"), expression(italic("N") ~ " = 4000"))) +  # Set X-axis labels
  scale_y_continuous(breaks = seq(-40, 40, by = 10)) +  
  common_theme +
  geom_hline(yintercept = c(-10, 10), linetype = "dashed", color = "#4169E1", linewidth = 0.3) +  
  geom_hline(yintercept = c(-5, 5), linetype = "dashed", color = "#E14169", linewidth = 0.3) +
  theme(
    legend.position = "bottom", 
    strip.placement = "outside", 
    strip.background = element_blank(),
    panel.spacing = unit(0.5, "lines")
  )

# Print the plot
print(plot_stayer)

```

```{r}

# Mutate columns to factor with custom labels
all_data <- all_data %>% 
  mutate(N = factor(N,
                    labels = c("N = 500", "N = 1000", "N = 2000", "N = 4000"))) %>% 
  mutate(population = factor(population,
                             labels = c(`.2`= ".200", `.3` = ".300", `.4` = ".400",
                                        `.6`= ".600", `.7` = ".700", `.8` = ".800")))

# Change names in the "Transitions" column
all_data <- all_data %>%
  mutate(Transitions = ifelse(Transitions == 1, "Mover", "Stayer"))

rownames(all_data) <- NULL

# Ordering the table based on the "Transitions" column
all_data <- all_data %>%
  arrange(Transitions)

# Create a new column for labels in Transition_Label and N_Label
all_data$N_Label <- ""

# Add labels to the "N" column at desired intervals
num_rows <- nrow(all_data)
for (i in seq(1, num_rows, by = 3)) {
  if (i + 1 <= num_rows) {
    all_data$N_Label[i + 1] <- as.character(all_data$N[i])
  }
}

# Select necessary columns
test_map <- select(all_data, N_Label, population, average, Coverage, Power, Parameter_Bias, SE_Bias)




```

```{r}
library(readr)

# Function to generate a custom color palette based on bias values
generate_palette <- function(bias_values, bias_type) {
  # Define base colors for Parameter Bias (blue) and SE Bias (red)
  base_color <- ifelse(bias_type == "Parameter_Bias", "#6FA4FC", "#FF6B6B")  # Adjust base colors
  
  # Define a function to generate colors based on bias values
  generate_colors <- function(color, bias_values) {
    max_abs_bias <- max(abs(bias_values))
    color_range <- colorRampPalette(c("white", color))(101)  # Generate a gradient from white to the base color
    color_indices <- cut(abs(bias_values), breaks = 101, labels = FALSE)
    colors <- color_range[color_indices]
    colors[bias_values == 0] <- "white"  # Set color to white when bias is zero
    return(colors)
  }
  
  # Generate colors based on bias values
  custom_palette <- generate_colors(base_color, bias_values)
  
  return(custom_palette)
}

# Create the gt table with subheaders based on "Transition_Label" column
test_map %>%
  gt() %>%
  opt_table_font(stack = "geometric-humanist") %>% 
  tab_header(
    title = "LTA Generated & LTA Analyzed with Mover Transition Probabilities"
  ) %>%
  cols_label(
    N_Label = "Sample Size",
    population = "Transition<br>Probability",
    average = "Estimated<br>Probability",
    Coverage = "Coverage",
    Power = "Power",
    Parameter_Bias = "Parameter <br>Bias",
    SE_Bias = "Standard Error<br>Bias",
    .fn = md
  ) %>%
  tab_spanner(
    label = "Bias",
    columns = c("Parameter_Bias", "SE_Bias")
  ) %>%
  tab_row_group(
    label = "Mover Probabilities",  # Label for the first subgroup
    rows = c(1:12)  # Rows corresponding to the first subgroup
  ) %>%
  tab_row_group(
    label = "Stayer Probabilities",  # Label for the second subgroup
    rows = c(13:24)  # Rows corresponding to the second subgroup
  ) %>%
  tab_style(
    style = cell_text(
      font = "bold italic"  # Apply bold and italic styling
    ),
    locations = cells_row_groups()  # Apply style to row subheaders
  ) %>%
  data_color(
    columns = 6, 
    colors = generate_palette(test_map$Parameter_Bias, "Parameter_Bias")  # Generate custom palette for Parameter Bias
  ) %>%
  data_color(
    columns = 7, 
    colors = generate_palette(test_map$SE_Bias, "SE_Bias")  # Generate custom palette for SE Bias
  ) %>%
  fmt_number(columns = 6:7, decimals = 2) %>%
  fmt_number(columns = 3, decimals = 3) %>%
  tab_options(
    table_body.hlines.color = "white",
    table.border.top.color = "black",
    table.border.bottom.color = "black",
    table_body.border.bottom.color = "black",
    heading.border.bottom.color = "black",
    column_labels.border.top.color = "black",
    column_labels.border.bottom.color = "black",
    row_group.border.bottom.color = "black" ,
    row_group.border.top.color = "black" # Set the bottom border color of tab rows to black
  ) %>%
  cols_align(
    align = c("center"),
    columns = everything()
  )
```

```{r}

```
