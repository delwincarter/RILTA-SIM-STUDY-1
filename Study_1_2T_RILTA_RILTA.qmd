---
title: "Study 1 (k = 2) RILTA Generated, RILTA Analyzed"
format: html

editor: visual
author: "Delwin Carter"
page-layout: full
fig-format: svg
knitr:
  opts_chunk:
    out.width: "90%"
    fig.align: center
---

```{r, message=FALSE, warning=FALSE}
library(tidyverse)
library(MplusAutomation)
library(here)
library(gt)
library(janitor)
library(glue)
library(ggtext)
library(rlang)
library(knitr)
```

# Data Conditions

![](images/RILTA_RILTA.png){width="354"}

Sample Size: N = 500, 1000, 2000, and 4000

Transition logit (probability): TPs = 1.385 (.8), .85 (.7), .41 (.6), -.41 (.4), -.85 (.3) , and -1.385 (.2)

![](images/clipboard-3344253592.png){width="450"}

RI Loadings: lamda = 0, 1, 1.5, 2, 2.5, and 3

![](images/clipboard-3119439446.png){width="351"}

```{r}
#Create grid of conditions for iteration
p1 <- expand.grid(N = c(500, 1000, 2000, 4000),
TPs = c(1.385, .85, .41, -.41, -.85, -1.385),
TH = c(1),
lamda = c(0, 1, 1.5, 2, 2.5, 3))
       
p1
```

```{r,message=FALSE, warning=FALSE, eval = FALSE}
#Run all models
rilta_rilta_func <- function(N, TPs, TH, lamda) {
  
  RILTA_RILTA <- mplusObject(
    TITLE = glue("Generate RILTA_RILTA_N = {N}_TP = {TPs}_{TH}"),

    MONTECARLO =
      glue("NAMES = u11-u15 u21-u25;
      GENERATE = u11-u15 u21-u25(1);
      CATEGORICAL = u11-u15 u21-u25;
      GENCLASSES = c1(2) c2(2);
      CLASSES = c1(2) c2(2);
      NOBSERVATIONS = {N};
      SEED = 07252005;
      NREPS = 500;"),

    ANALYSIS =
      "TYPE = MIXTURE;
      algorithm = integration;
      processors = 8;
      logcriterion=0.00001;
      mconv=0.00001;",

    MODELPOPULATION = glue("	
        %OVERALL%

       [c1#1-c2#1*0];
      	c2#1 on c1#1*{TPs};
      	
       f by u11-u15*{lamda} (p1-p5)
            u21-u25*{lamda} (p1-p5);
        f@1;
        [f@0];
        
      MODEL POPULATION-c1:
        %c1#1%
     [u11$1*{TH} u12$1*{TH} u13$1*{TH} u14$1*{TH} u15$1*{TH}] (p111-p115);

        %c1#2%
     [u11$1*-{TH} u12$1*-{TH} u13$1*-{TH} u14$1*-{TH} u15$1*-{TH}] (p121-p125);

      MODEL POPULATION-c2:  
        %c2#1%
     [u21$1*{TH} u22$1*{TH} u23$1*{TH} u24$1*{TH} u25$1*{TH}] (p111-p115);

        %c2#2%
     [u21$1*-{TH} u22$1*-{TH} u23$1*-{TH} u24$1*-{TH} u25$1*-{TH}] (p121-p125);
       "),
     
    MODEL =
      glue("	
        %OVERALL%
          [c1#1-c2#1*0](par1-par2);
        	c2#1 on c1#1*{TPs} (par11);
        	
       f by u11-u15*{lamda} (p1-p5)
            u21-u25*{lamda} (p1-p5);
      	f@1;
        [f@0];

     MODEL c1:
        %c1#1%
     [u11$1*{TH} u12$1*{TH} u13$1*{TH} u14$1*{TH} u15$1*{TH}] (p111-p115);

        %c1#2%
     [u11$1*-{TH} u12$1*-{TH} u13$1*-{TH} u14$1*-{TH} u15$1*-{TH}] (p121-p125);

    MODEL c2: 	
        %c2#1%
     [u21$1*{TH} u22$1*{TH} u23$1*{TH} u24$1*{TH} u25$1*{TH}] (p111-p115);

        %c2#2%
     [u21$1*-{TH} u22$1*-{TH} u23$1*-{TH} u24$1*-{TH} u25$1*-{TH}] (p121-p125);
	      "),
      
    MODELCONSTRAINT =
      if (TPs == 1.385) {
        glue("
        New(
        trans11*.80 trans12*.20 trans21*.5 trans22*.5
        prob11*.5 prob12*.5 prob21*.65 prob22*.35);
        trans11 = 1/(1+exp(-(par2+par11)));
        trans12 = 1-trans11;
        trans21 = 1/(1+exp(-par2));
        trans22 = 1- trans21;
        !marginal probabilities at T1 and T2:
        prob11 = 1/(1+exp(-par1));
        prob12 = 1 - prob11;
        prob21 = prob11*trans11+prob12*trans21;
        prob22 = 1- prob21;
        ")
      } 
             else if (TPs == .85) {
        glue("
        New(
        trans11*.70 trans12*.30 trans21*.5 trans22*.5
        prob11*.5 prob12*.5 prob21*.60 prob22*.4);
        trans11 = 1/(1+exp(-(par2+par11)));
        trans12 = 1-trans11;
        trans21 = 1/(1+exp(-par2));
        trans22 = 1- trans21;
        !marginal probabilities at T1 and T2:
        prob11 = 1/(1+exp(-par1));
        prob12 = 1 - prob11;
        prob21 = prob11*trans11+prob12*trans21;
        prob22 = 1- prob21;
        ")
              } 
            else  if (TPs == .41) {
        glue("
        New(
        trans11*.60 trans12*.40 trans21*.5 trans22*.5
        prob11*.5 prob12*.5 prob21*.55 prob22*.45);
        trans11 = 1/(1+exp(-(par2+par11)));
        trans12 = 1-trans11;
        trans21 = 1/(1+exp(-par2));
        trans22 = 1- trans21;
        !marginal probabilities at T1 and T2:
        prob11 = 1/(1+exp(-par1));
        prob12 = 1 - prob11;
        prob21 = prob11*trans11+prob12*trans21;
        prob22 = 1- prob21;
        ")
              } 
             else if (TPs == -.41) {
        glue("
        New(
        trans11*.40 trans12*.60 trans21*.5 trans22*.5
        prob11*.5 prob12*.5 prob21*.45 prob22*.55);
        trans11 = 1/(1+exp(-(par2+par11)));
        trans12 = 1-trans11;
        trans21 = 1/(1+exp(-par2));
        trans22 = 1- trans21;
        !marginal probabilities at T1 and T2:
        prob11 = 1/(1+exp(-par1));
        prob12 = 1 - prob11;
        prob21 = prob11*trans11+prob12*trans21;
        prob22 = 1- prob21;
        ")
              } 
             else if (TPs == -.85) {
        glue("
        New(
        trans11*.30 trans12*.70 trans21*.5 trans22*.5
        prob11*.5 prob12*.5 prob21*.40 prob22*.60);
        trans11 = 1/(1+exp(-(par2+par11)));
        trans12 = 1-trans11;
        trans21 = 1/(1+exp(-par2));
        trans22 = 1- trans21;
        !marginal probabilities at T1 and T2:
        prob11 = 1/(1+exp(-par1));
        prob12 = 1 - prob11;
        prob21 = prob11*trans11+prob12*trans21;
        prob22 = 1- prob21;
        ")
              } 
        
        else if (TPs == -1.385) {
        glue("
         New(
        trans11*.20 trans12*.80 trans21*.5 trans22*.5
        prob11*.5 prob12*.5 prob21*.35 prob22*.65);

        trans11 = 1/(1+exp(-(par2+par11)));
        trans12 = 1-trans11;
        trans21 = 1/(1+exp(-par2));
        trans22 = 1- trans21;
        !marginal probabilities at T1 and T2:
        prob11 = 1/(1+exp(-par1));
        prob12 = 1 - prob11;
        prob21 = prob11*trans11+prob12*trans21;
        prob22 = 1- prob21;")
      }
  )

  # Run Mplus model
  RILTA_RILTA_Model<- mplusModeler(RILTA_RILTA, 
                                   dataout = here("3. 2T RILTA GEN RILTA ANALYZED", glue("RILTA_RILTA_N = {N}_TP = {TPs}_TH = {TH}_lamda = {lamda}.dat")),
                                   modelout = glue(here("3. 2T RILTA GEN RILTA ANALYZED", "RILTA_RILTA_N = {N}_TP = {TPs}_TH = {TH}_lamda = {lamda}.inp")),
                                   check = TRUE, run = TRUE, hashfilename = FALSE)
return(RILTA_RILTA_Model)
}

result_list <- lapply(1:nrow(p1), function(i) {
  rilta_rilta_func(p1$N[i], p1$TPs[i], p1$TH[i],  p1$lamda[i])
               })
```

# 

```{r}
# Extract models
lta_sim <- readModels(here("3. 2T RILTA GEN RILTA ANALYZED"), what = "parameters")

# Create table of unstandardized values across outputs
ltaNames <- names(lta_sim)
unstandardizedLTA <- sapply(sapply(lta_sim, "[", "parameters"), "[", "unstandardized")
names(unstandardizedLTA) <- ltaNames
```

```{r}
# Wrangle
apply_table_setup <- function(data) {
  table_setup <- data %>%
    slice(24) %>%  # Select only row 24
    rename(Power = pct_sig_coef,
           Parameter = param,
           Coverage = cover_95)  %>% 
               select(Parameter:Power)
  
  return(table_setup)
}
```

```{r}
resultsLTA <- lapply(unstandardizedLTA, apply_table_setup)

lta_combined <- do.call("rbind", resultsLTA)
lta_combined <- as.data.frame(lta_combined)
rownames(lta_combined) <- toupper(rownames(lta_combined))
```

```{r}
#Recode data
lta_combined <- lta_combined %>%
  mutate(N = rep(1:4, each = 36)) %>%
  mutate(N = recode(N, "1" = 2, "2" = 3, "3" = 4, "4" = 1)) %>%
  arrange(N) %>%
  mutate(Transitions = ifelse(population %in% c(0.2, 0.3, 0.4), 1,
                              ifelse(population %in% c(0.6, 0.7, 0.8), 2, NA))) %>%
  mutate(Cond_Num = as.array(rep(1:144))) %>%
  mutate(N = factor(N,
                    labels = c(`1` = "N = 500", `2` = "N = 1000",
                                `3` = "N = 2000", `4` = "N = 4000")))
# Define the labels
labels <- c(
  expression(italic('N') ~ "= 500"),
  expression(italic('N') ~ "= 1000"),
  expression(italic('N') ~ "= 2000"),
  expression(italic('N') ~ "= 4000")
)

# Assign the labels to the levels
lta_combined$N <- factor(lta_combined$N, labels = labels)
```

```{r}
# Calculate dichotomous variable for Power
lta_combined <- lta_combined %>%
  mutate(Power_Dic = ifelse(Power >= 0.8, 1, 0))

# Calculate dichotomous variable for Coverage
lta_combined <- lta_combined %>%
  mutate(Coverage_Dic = ifelse(Coverage > 0.98 | Coverage < 0.91, 0, 1))
```

```{r}
# Calculate Parameter Bias and SE Bias without %
lta_combined <- lta_combined %>%
  mutate(Parameter_Bias = ((as.numeric(as.character(average)) - as.numeric(as.character(population))) / as.numeric(as.character(population))) * 100,
         SE_Bias = ((as.numeric(as.character(average_se)) - as.numeric(as.character(population_sd))) / as.numeric(as.character(population_sd))) * 100) %>%
  mutate(across(c(Parameter_Bias, SE_Bias), ~ round(., 2)))
lta_combined$Parameter_Bias <- as.numeric(lta_combined$Parameter_Bias)
lta_combined$SE_Bias <- as.numeric(lta_combined$SE_Bias)
```

```{r}

# Define and create a column of the lambda values 
lambda_values <- lta_combined$Lambda <- rep(c("0", "1.5", "1", "2.5", "2", "3"))

lta_combined$Lambda <- as.numeric(lta_combined$Lambda)

# Convert character variables to numeric
lta_combined$Parameter_Bias <- as.numeric(lta_combined$Parameter_Bias)
lta_combined$SE_Bias <- as.numeric(lta_combined$SE_Bias)
lta_combined$Lambda <- as.numeric(lta_combined$Lambda)

```

#### 

```{r}
all_data <-lta_combined

#Create column of values that can populate our figure
all_data$Population_Label <- factor(all_data$population, levels = c(.2, .3, .4, .6, .7, .8), labels = c(
  expression(bold(C[11]) ~ "\u2192" ~ bold(C[21]) ~ " = .200"),
  expression(bold(C[11]) ~ "\u2192" ~ bold(C[21]) ~ " = .300"),
  expression(bold(C[11]) ~ "\u2192" ~ bold(C[21]) ~ " = .400"),
  expression(bold(C[11]) ~ "\u2192" ~ bold(C[21]) ~ " = .600"),
  expression(bold(C[11]) ~ "\u2192" ~ bold(C[21]) ~ " = .700"),
  expression(bold(C[11]) ~ "\u2192" ~ bold(C[21]) ~ " = .800")
  ))

#Create subsets for both figures
# Subset for Transitions movers
subset_mover <- subset(all_data, Transitions == 1)

# Subset for Transitions stayers
subset_stayer <- subset(all_data, Transitions == 2)
```

#### Plot code for Mover and Stayer Data Visualization

```{r}

# Define common themes and aesthetics
common_theme <- theme_minimal() +
  theme(
    panel.grid.major.x = element_blank(),
    panel.grid.minor.x = element_blank(),
    panel.grid.minor.y = element_blank(),
    axis.text.x = element_text(size = 6),
    axis.ticks = element_line(color = "black", linewidth = 0.2),
    legend.position = "bottom",
    legend.title = element_blank(),
    text = element_text(family = "Times New Roman"),
    axis.title.x = element_text(margin = margin(t = 10, b = 10)),
    legend.margin = margin(t = -10),
    plot.caption = element_text(hjust = 0, margin = margin(t = 10))
  )

common_labels <- labs(
  x = "Lambda Loadings on the RI",
  y = "Bias (%)",
  color = ""
)

# Function to create plots
create_plot <- function(data, title_suffix) {
  ggplot(data = data, aes(x = Lambda)) +  
    geom_line(aes(y = Parameter_Bias, color = "Parameter Bias"), linewidth = 0.3, linetype = "solid") +  
    geom_line(aes(y = SE_Bias, color = "Standard Error Bias"), linewidth = 0.3, linetype = "solid") +  
    geom_point(aes(y = Parameter_Bias, color = "Parameter Bias"), shape = 16, size = 1, fill = "#4169E1", alpha = 0.8) +  
    geom_point(aes(y = SE_Bias, color = "Standard Error Bias"), shape = 18, size = 1, fill = "#E14169", alpha = 0.8) +  
    geom_point(data = subset(data, Coverage_Dic == 0), aes(y = Parameter_Bias, color = "Coverage Failure"), shape = 1, size = 2, fill = "#4169E1", alpha = 1) + 
    geom_point(data = subset(data, Power_Dic == 0), aes(y = Parameter_Bias, color = "Power Failure"), shape = 4, size = 2, fill = "black", alpha = 1) + 
    scale_color_manual(
      values = c("Parameter Bias" = "#4169E1", "Standard Error Bias" = "#E14169", "Coverage Failure" = "#4169E1", "Power Failure" = "black"), 
      labels = c("Parameter Bias", "Standard Error Bias", "Coverage Failure", "Power Failure"), 
      breaks = c("Parameter Bias", "Standard Error Bias", "Coverage Failure", "Power Failure"),
      guide = guide_legend(
        override.aes = list(
          shape = c(16, 18, 1, 4)  # Circle, diamond, circle
        )
      )
    ) +  
    labs(
      x = "Lambda Loadings on the RI",
      y = "Bias (%)",
      color = "",
      title = paste("RILTA Generated Data RILTA Analyzed with", title_suffix, "Transition Probabilities")
    ) +
    coord_cartesian(ylim = c(-40, 40)) +  
    facet_grid(Population_Label ~ N, scales = "free_x", labeller = label_parsed) +
    scale_x_continuous(breaks = c(0,1,1.5,2.5,3), minor_breaks = seq(0, 3), labels = scales::number_format(accuracy = 0.1)) +  
    scale_y_continuous(breaks = seq(-40, 40, by = 10)) +  
    common_theme +
    geom_hline(yintercept = c(-10, 10), linetype = "dashed", color = "#4169E1", linewidth = 0.3) +  
    geom_hline(yintercept = c(-5, 5), linetype = "dashed", color = "#E14169", linewidth = 0.3)
}

```

#### Plot figure with Mover Transition Probabilities (.200, .300, .400)

```{r}
# Create and print plot for Mover
plot_mover <- create_plot(subset_mover, "Mover")
#| column: screen
#| fig-format: svg
print(plot_mover)
```

#### Plot figure with Mover Transition Probablities (.200, .300, .400)

```{r}
# Create and print plot for Stayer
plot_stayer <- create_plot(subset_stayer, "Stayer")
#| column: screen
#| fig-format: svg
print(plot_stayer)
```

####  Wrangle Data for Heatmaps:

```{r}
# Mutate columns to factor with custom labels
all_data <- all_data %>% 
  mutate(N_Label = factor(N,
                    labels = c("N = 500", "N = 1000", "N = 2000", "N = 4000"))) %>% 
  mutate(population = factor(population,
                             labels = c(`.2`= ".200", `.3` = ".300", `.4` = ".400",
                                        `.6`= ".600", `.7` = ".700", `.8` = ".800")))

# Change names in the "Transitions" column
all_data <- all_data %>%
  mutate(Transitions = ifelse(Transitions == 1, "Mover", "Stayer"))

rownames(all_data) <- NULL

# Ordering the table based on the "Lambda" column from 0 -> 3
all_data <- all_data %>%
  arrange(Lambda)

# Select necessary columns
test_map <- select(all_data, Lambda, N_Label, population, average, Coverage, Power, Parameter_Bias, SE_Bias)

# Define the population values as characters
population_values <- c(".200", ".300", ".400", ".600", ".700", ".800")

# Function to subset the data for a specific population value
subset_data <- function(data, pop_value) {
  subset <- data %>%
    filter(population == pop_value)
  return(subset)
}

# Apply the function to each population value
subset_list <- lapply(population_values, function(x) subset_data(test_map, as.character(x)))
# Access the subsets for each population value
subset_02 <- subset_list[[1]]  # Subset for population value .200
subset_03 <- subset_list[[2]]  # Subset for population value .300
subset_04 <- subset_list[[3]]  # Subset for population value .400
subset_06 <- subset_list[[4]]  # Subset for population value .600
subset_07 <- subset_list[[5]]  # Subset for population value .700
subset_08 <- subset_list[[6]]  # Subset for population value .800
```

####  CREATE FUNCTION TO BUILD HEAT MAPS FOR EACH TRANSITION PROBABILITY  .200, .300, .400, .600, .700, .800

```{r}
create_table <- function(subset, transition_probability) {
  subset <- select(subset, N_Label, population, average, Coverage, Power, Parameter_Bias, SE_Bias)
  subset <- subset %>%
    mutate(across(where(is.character), as.numeric)) %>%
    gt() %>%
    opt_table_font(stack = "geometric-humanist") %>% 
    tab_header(
      title = paste("RILTA Generated & RILTA Analyzed with Transition Probability of", transition_probability)
    ) %>%
    cols_label(
      N_Label = "Sample Size",
      population = "Transition<br>Probability",
      average = "Estimated<br>Probability",
      Coverage = "Coverage",
      Power = "Power",
      Parameter_Bias = "Parameter <br>Bias",
      SE_Bias = "Standard Error<br>Bias",
      .fn = md
    ) %>%
    tab_spanner(
      label = "Bias",
      columns = c("Parameter_Bias", "SE_Bias")
    ) %>%
    tab_row_group(
      label = "Lambda RI Loading of 3 (λ)",  # Label for the first subgroup
      rows = c(21:24)  # Rows corresponding to the first subgroup
    ) %>%
    tab_row_group(
      label = "Lambda RI Loading of 2.5 (λ)",  # Label for the second subgroup
      rows = c(17:20)  # Rows corresponding to the second subgroup
    ) %>%
    tab_row_group(
      label = "Lambda RI Loading of 2 (λ)",  # Label for the third subgroup
      rows = c(13:16)  # Rows corresponding to the third subgroup
    ) %>%
    tab_row_group(
      label = "Lambda RI Loading of 1.5 (λ)",  # Label for the fourth subgroup
      rows = c(9:12)  # Rows corresponding to the fourth subgroup
    ) %>%
    tab_row_group(
      label = "Lambda RI Loading of 1 (λ)",  # Label for the fifth subgroup
      rows = c(5:8)  # Rows corresponding to the fifth subgroup
    ) %>%
    tab_row_group(
      label = "Lambda RI Loading of 0 (λ)",  # Label for the sixth subgroup
      rows = c(1:4)  # Rows corresponding to the sixth subgroup
    ) %>%
      tab_style(
    style = cell_text(
      font = "bold italic"  # Apply bold and italic styling
    ),
    locations = cells_row_groups()  # Apply style to row subheaders
  ) %>%
    data_color(
      columns = "Parameter_Bias", 
      rows = !(Parameter_Bias >= -9.99 & Parameter_Bias <= 9.99),
      method = "numeric",
      palette = c("white", "#5ABCEB"),  # Updated to use a brighter shade of blue
      domain = c(-130, 130),
      apply_to = "fill"
    ) %>%
    data_color(
      columns = "SE_Bias", 
      rows = !(SE_Bias >= -4.99 & SE_Bias <= 4.99),
      method = "numeric",
      palette = c("#E71012", "white"),  # Updated to use a brighter shade of red
      domain = c(-130, 130),
      apply_to = "fill"
    ) %>%
    data_color(
      columns = "Coverage", 
      rows = Coverage < 0.93 | Coverage > 0.979,
      method = "numeric",
      palette = c("#193006", "white"),  # Using the same shade of blue
      domain = c(0, 1),
      apply_to = "fill"
    ) %>%
    data_color(
      columns = "Power", 
      rows = Power < 0.8,
      method = "numeric",
      palette = c("#300049", "white"),  # Using the same shade of red
      domain = c(0, 1),
      apply_to = "fill"
    ) %>%
    fmt_number(columns = c("Parameter_Bias", "SE_Bias"), decimals = 2) %>%  
    fmt_number(columns = 4, decimals = 3) %>%
    tab_options(
      table_body.hlines.color = "white",
      table.border.top.color = "black",
      table.border.bottom.color = "black",
      table_body.border.bottom.color = "black",
      heading.border.bottom.color = "black",
      column_labels.border.top.color = "black",
      column_labels.border.bottom.color = "black",
      row_group.border.bottom.color = "black" ,
      row_group.border.top.color = "black" 
    ) %>%
    cols_align(
      align = c("center"),
      columns = everything()
    ) %>%
    tab_footnote(
    footnote = md("Green indicates failure to achieve adequate *Coverage*."),
    locations = cells_column_labels(columns = Coverage)
  ) %>%
    tab_footnote(
    footnote = md("Purple indicates failure to achieve adequate *Power*."),
    locations = cells_column_labels(columns = Power)
  ) %>%
    tab_footnote(
    footnote = md("Blue indicates violation of *Parameter Bias*."),
    locations = cells_column_labels(columns = Parameter_Bias)
  ) %>%
    tab_footnote(
    footnote = md("Red indicates violation of *Standard Error Bias*."),
    locations = cells_column_labels(columns = SE_Bias)
  ) 

  return(subset)
}
```

####  Render tables for each transition probability condition  TABLE FOR TRANSITION PROBABILITIES OF .200

```{r}
subset_02_table <- create_table(subset_02, ".200")
subset_02_table
```

#### TABLE FOR TRANSITION PROBABILITIES OF .300

```{r}
subset_03_table <- create_table(subset_03, ".300")
subset_03_table
```

#### TABLE FOR TRANSITION PROBABILITIES OF .400

```{r}
subset_04_table <- create_table(subset_04, ".400")
subset_04_table
```

#### TABLE FOR TRANSITION PROBABILITIES OF .600

```{r}
subset_06_table <- create_table(subset_06, ".600")
subset_06_table
```

#### TABLE FOR TRANSITION PROBABILITIES OF .700

```{r}
subset_07_table <- create_table(subset_07, ".700")
subset_07_table
```

#### TABLE FOR TRANSITION PROBABILITIES OF .800

```{r}
subset_08_table <- create_table(subset_08, ".800")
subset_08_table
```
